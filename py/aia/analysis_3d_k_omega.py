#
# Further analysis and plots based on the k-omega data generated by
# analysis_3d_fft.py
#
import os
import cPickle as pickle
import numpy as np
import matplotlib.pyplot as plt

from details_plots import log_10_product


frequency_unit = 'mHz'

sources = {"BM4D": {"file_path": 0},
           "BM3D": {"file_path": 0},
           "PSF_removed": {"file_path": 0},
           "no_denoise": {"file_path": 0}}

# Load data
for source in sources:
    file_path = sources[source]["file_path"]

#
# Compare mean powers
#

# Pick how we are going to analyze the data
for mean_style, mean_style_label in enumerate(('mean Fourier power', 'mean log10(Fourier power)')):

    # Pick which quantity we want to plot
    for axis, data_type in enumerate(('wavenumber', 'frequency')):

        # Start the plot
        plt.close('all')
        fig, ax = plt.subplots()
        ax.set_xscale('log')
        ax.set_xlabel(data_type)
        ax.xaxis.set_major_formatter(plt.FuncFormatter(log_10_product))

        ax.set_yscale('log')
        ax.set_ylabel('Fourier power')

        # Go through all the data sources
        for source in sources:

            k_omega_power = sources[source]["k_omega_power"]
            spm = sources[source]["spm"]
            wn = sources[source]["wn"]

            if mean_style == 0:
                mean_power = np.mean(k_omega_power, axis=axis)
            else:
                mean_power = np.exp(np.mean(np.log(k_omega_power), axis=axis))

            if axis == 0:
                xaxis = wn.value
            else:
                xaxis = spm[0, :].to(frequency_unit).value

            # Plot mean power
            ax.plot(xaxis, mean_power, label=source)
            ax.set_title(source + '\n{:s}'.format(mean_style_label))

        fig.legend()
        fig.tight_layout()
        fig.savefig(file_path + '.compare.{:s}.{:s}.png'.format(mean_style_label, data_type))




